class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int>ans;
        int m = matrix.size();
        int n = matrix[0].size();
        int count =0;
        int total =m*n;
        cout<<m<<" "<<n;
        if(m==1){
            return matrix[0];
        }
        if(n==1){
            for(int q=0;q<m;q++){
                ans.push_back(matrix[q][0]);
            }
            return ans;
        }
        int x = m/2;
        int y = n/2;
        if(n==2){
            y=0;
        }
        int i =0;
        int j =0;
        int g =0;
        int h =0;
        while(true){
            while(j<n-h){
                ans.push_back(matrix[i][j]);
                count++;
                if(count==total){
                  return ans;
                  }
                j++;
            }
            j--;
            i++;
            while(i<m-g){
                ans.push_back(matrix[i][j]);
                count++;
                if(count==total){
                  return ans;
                  }
                i++;
            }
            i--;
            j--;
            while(j>=h){
                ans.push_back(matrix[i][j]);
                count++;
                if(count==total){
                  return ans;
                  }
                j--;
            }
            j++;
            i--;
            g++;
            while(i>=g){
                ans.push_back(matrix[i][j]);
                count++;
                if(count ==total){
                  return ans;
                  }
                i--;
            }
            i++;
            j++;
            h++;
        } 
        return ans;
    }
};