class Solution{
    public:
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    
    int numberOfNodesInTree(Node *root){
        if(root==NULL) return 0;
        
        if(root->left ==NULL && root->right==NULL) return 1;
        
        int left = numberOfNodesInTree(root->left);
        int right = numberOfNodesInTree(root->right);
        
        return left+right+1;
        
    }
    bool isBST(Node *root , int min , int max){
        if(root==NULL)   return true;
        
        if(root->data > min && root->data < max){
            bool left = isBST(root->left , min , root->data );
            bool right = isBST(root->right , root->data , max);
            
            return left && right;
            
        }
        return false;
    }
    
    void solve(Node*root,int&ans){
        if(root==NULL)return;
         if(root->left==NULL && root->right==NULL) return;
         if(isBST(root,INT_MIN,INT_MAX)){
            int n = numberOfNodesInTree(root);
            ans = max(ans,n);
        }
        
        solve(root->left , ans);
        solve(root->right , ans);
    }
    
    int largestBst(Node *root)
    {
    	//Your code here
    	int ans = 1;
    	solve(root,ans);
    	
    	return ans;
    }
};