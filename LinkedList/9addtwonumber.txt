//{ Driver Code Starts
// driver

#include <bits/stdc++.h>
using namespace std;

/* Linked list Node */
struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

struct Node* buildList(int size)
{
    int val;
    cin>> val;
    
    Node* head = new Node(val);
    Node* tail = head;
    
    for(int i=0; i<size-1; i++)
    {
        cin>> val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
    cout<< endl;
}


// } Driver Code Ends
/* node for linked list:

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution
{
public:
    void reverse(Node *&head)
    {
        Node *cur = head;
        Node *prev = NULL;
        Node *suc = NULL;
        while (cur)
        {
            suc = cur->next;
            cur->next = prev;
            prev = cur;
            cur = suc;
        }
        head = prev;
    }

    // Function to add two numbers represented by linked list.

    struct Node *addTwoLists(struct Node *first, struct Node *second)
    {
        reverse(first);
        reverse(second);
        Node *t1 = first;
        Node *t2 = second;
        Node *head = new Node(-1);
        Node *h = head;
        int c = 0;
        int s = 0;
        while (t1 && t2)
        {
            s = t1->data + t2->data + c;
            Node *p = new Node(s % 10);
            c = s / 10;
            h->next = p;
            h = h->next;
            t1 = t1->next;
            t2 = t2->next;
        }
        while (t1)
        {
            s = t1->data + c;
            Node *p = new Node(s % 10);
            c = s / 10;
            h->next = p;
            h = h->next;
            t1 = t1->next;
        }
        while (t2)
        {
            s = t2->data + c;
            Node *p = new Node(s % 10);
            c = s / 10;
            h->next = p;
            h = h->next;
            t2 = t2->next;
        }
        if (c)
        {
            Node *p = new Node(c);
            h->next = p;
            h = h->next;
        }
        reverse(head->next);
        return head->next;
    }
};


//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, m;
        
        cin>>n;
        Node* first = buildList(n);
        
        cin>>m;
        Node* second = buildList(m);
        Solution ob;
        Node* res = ob.addTwoLists(first,second);
        printList(res);
    }
    return 0;
}

// } Driver Code Ends